name: Test Coverage

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  COVERAGE_THRESHOLD: 80

jobs:
  coverage:
    name: Generate test coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-tarpaulin
      run: |
        cargo install cargo-tarpaulin --locked
        
    - name: Run tests with coverage
      run: |
        cargo tarpaulin \
          --out Html \
          --out Lcov \
          --out Json \
          --output-dir coverage \
          --exclude-files "*/tests/*" \
          --exclude-files "*/examples/*" \
          --exclude-files "*/benches/*" \
          --exclude-files "*/build.rs" \
          --workspace \
          --timeout 600 \
          --fail-under ${{ env.COVERAGE_THRESHOLD }}
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: ant-quic-coverage
        fail_ci_if_error: true
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30
        
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        COVERAGE=$(jq -r '.coverage' coverage/tarpaulin-report.json)
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Create badge JSON
        COLOR="red"
        if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="green"
        elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
          COLOR="yellow"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="orange"
        fi
        
        echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${COVERAGE}%\", \"color\": \"$COLOR\"}" > coverage-badge.json
        
    - name: Comment PR with coverage
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage/tarpaulin-report.json', 'utf8'));
          
          const comment = `## Test Coverage Report 📊
          
          **Total Coverage: ${coverage.coverage.toFixed(2)}%** ${coverage.coverage >= 80 ? '✅' : '❌'}
          
          <details>
          <summary>Coverage by File</summary>
          
          | File | Coverage | Lines |
          |------|----------|-------|
          ${Object.entries(coverage.files)
            .sort((a, b) => a[1].coverage - b[1].coverage)
            .slice(0, 10)
            .map(([file, data]) => `| ${file} | ${data.coverage.toFixed(1)}% | ${data.covered_lines}/${data.total_lines} |`)
            .join('\n')}
          
          </details>
          
          ${coverage.coverage < 80 ? '⚠️ Coverage is below the required threshold of 80%' : '✅ Coverage meets the required threshold'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })

  coverage-report:
    name: Coverage Report Summary
    runs-on: ubuntu-latest
    needs: coverage
    if: always()
    
    steps:
    - name: Download coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        
    - name: Display coverage summary
      run: |
        if [ -f coverage/tarpaulin-report.json ]; then
          echo "## Coverage Summary"
          echo ""
          COVERAGE=$(jq -r '.coverage' coverage/tarpaulin-report.json)
          echo "Total Coverage: ${COVERAGE}%"
          echo ""
          echo "### Files with lowest coverage:"
          jq -r '.files | to_entries | sort_by(.value.coverage) | .[0:5] | .[] | "- \(.key): \(.value.coverage)%"' coverage/tarpaulin-report.json
        else
          echo "No coverage report found"
        fi
