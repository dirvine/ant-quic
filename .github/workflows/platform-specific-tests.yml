name: Platform-Specific Network Tests

on:
  push:
    branches: [ master ]
    paths:
      - 'src/candidate_discovery/**'
      - 'tests/**'
      - '.github/workflows/platform-specific-tests.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/candidate_discovery/**'
      - 'tests/**'
      - '.github/workflows/platform-specific-tests.yml'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
   # Windows-specific tests (simplified)
   windows-tests:
     runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Windows-specific tests
        run: |
          cargo test --features "windows-tests" -- --test-threads=1 windows
      
      - name: Run Windows IP Helper tests
        run: cargo test --lib candidate_discovery::windows::tests
      
      - name: Check Windows network interfaces
        run: |
          ipconfig /all
          netsh interface show interface
      
      - name: Run integration tests
        run: cargo test --test platform_api_integration_tests --features "windows-tests" windows

   # Linux-specific tests (simplified)
   linux-tests:
     runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y net-tools iproute2 wireless-tools
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run Linux-specific tests
        run: |
          cargo test --features "linux-tests" -- --test-threads=1 linux
      
      - name: Run Linux Netlink tests
        run: cargo test --lib candidate_discovery::linux::tests
      
      - name: Check Linux network interfaces
        run: |
          ip addr show
          ip link show
          cat /proc/net/dev
          cat /proc/net/if_inet6 || true
      
      - name: Test with network namespace (requires privileges)
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo ip netns add test-ns || true
            sudo ip netns exec test-ns cargo test linux_netlink_namespace || true
            sudo ip netns del test-ns || true
          fi
      
      - name: Run integration tests
        run: cargo test --test platform_api_integration_tests --features "linux-tests" linux

   # macOS-specific tests (simplified)
   macos-tests:
     runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run macOS-specific tests
        run: |
          cargo test --features "macos-tests" -- --test-threads=1 macos
      
      - name: Run macOS System Configuration tests
        run: cargo test --lib candidate_discovery::macos::tests
      
      - name: Check macOS network interfaces
        run: |
          ifconfig -a
          networksetup -listallhardwareports
          scutil --nwi
      
      - name: Run integration tests
        run: cargo test --test platform_api_integration_tests --features "macos-tests" macos

   # Cross-platform feature matrix tests (simplified)
   feature-matrix-tests:
     runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Run tests with features
        run: cargo test --features "${{ matrix.features }}" candidate_discovery

   # Platform API availability tests (simplified)
   api-availability-tests:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v4

       - name: Install Rust stable
         uses: dtolnay/rust-toolchain@stable

       - name: Create API availability test
         run: |
           cat > tests/check_platform_apis.rs << 'EOF'
           #[test]
           #[cfg(target_os = "linux")]
           fn test_linux_apis_available() {
               // Check that Linux network files are available
               assert!(std::path::Path::new("/proc/net/dev").exists());
               assert!(std::path::Path::new("/sys/class/net").exists());
           }

           #[test]
           #[cfg(target_os = "macos")]
           fn test_macos_apis_available() {
               // Check that macOS frameworks are available
               assert!(std::path::Path::new("/System/Library/Frameworks/SystemConfiguration.framework").exists());
               assert!(std::path::Path::new("/System/Library/Frameworks/CoreFoundation.framework").exists());
           }

           #[test]
           #[cfg(target_os = "windows")]
           fn test_windows_apis_available() {
               // Check that Windows IP Helper APIs are available
               assert!(std::path::Path::new("C:\\Windows\\System32\\iphlpapi.dll").exists());
           }
           EOF

       - name: Run API availability tests
         run: cargo test --test check_platform_apis

   # Summary job to ensure all platform tests pass
   all-platform-tests:
     needs:
       - windows-tests
       - linux-tests
       - macos-tests
       - feature-matrix-tests
       - api-availability-tests
     runs-on: ubuntu-latest
     steps:
       - name: Summary
         run: echo "All platform-specific tests completed successfully!"
