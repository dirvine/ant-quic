name: Docker NAT Tests

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      test_scenarios:
        description: 'Test scenarios to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - ipv6
          - stress
          - performance

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  docker-nat-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Increased from 90
    
    strategy:
      matrix:
        test-suite:
          - basic-connectivity
          - nat-traversal
          # Temporarily disabled to speed up CI
          # - ipv6-support
          # - stress-testing
          # - pqc-readiness
      fail-fast: false  # Continue running other test suites if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        # Free up space by removing unnecessary tools
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
        buildkitd-flags: --debug
        
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Enable IPv6 in Docker (optional)
      continue-on-error: true
      run: |
        echo '{
          "ipv6": true,
          "fixed-cidr-v6": "2001:db8::/64",
          "experimental": true,
          "ip6tables": true
        }' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker || true
        
    - name: Set up test environment
      run: |
        cd docker
        chmod +x scripts/*.sh
        mkdir -p logs results
        
    - name: Build base images with improved caching
      run: |
        cd docker
        
        # Build in stages with explicit caching
        echo "Building base builder image..."
        docker buildx build \
          --target builder \
          --tag ant-quic:builder \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --file Dockerfile.ant-quic \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg CARGO_BUILD_JOBS=2 \
          --progress=plain \
          .. || exit 1
        
        echo "Building runtime image..."
        docker buildx build \
          --target runtime \
          --tag ant-quic:runtime \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-from ant-quic:builder \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          --file Dockerfile.ant-quic \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg CARGO_BUILD_JOBS=2 \
          --progress=plain \
          .. || exit 1
        
        # Move cache
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
        echo "Building compose services..."
        docker compose -f docker-compose.enhanced.yml build --parallel bootstrap || \
        docker compose -f docker-compose.enhanced.yml build bootstrap
        
    - name: Run NAT test suite - ${{ matrix.test-suite }}
      timeout-minutes: 30
      run: |
        cd docker
        
        # Set reasonable timeouts for test execution
        export TEST_TIMEOUT=1800  # 30 minutes
        export CONNECTION_TIMEOUT=60  # 1 minute per connection attempt
        
        case "${{ matrix.test-suite }}" in
          basic-connectivity)
            ./scripts/run-enhanced-nat-tests.sh test_basic_connectivity || true
            ;;
          nat-traversal)
            ./scripts/run-enhanced-nat-tests.sh test_nat_traversal || true
            ;;
          ipv6-support)
            ./scripts/run-enhanced-nat-tests.sh test_ipv6_support || true
            ;;
          stress-testing)
            ./scripts/run-enhanced-nat-tests.sh test_stress || true
            ;;
          pqc-readiness)
            ./scripts/run-enhanced-nat-tests.sh test_pqc || true
            ;;
        esac
        
    - name: Collect test results
      if: always()
      run: |
        cd docker
        echo "Test suite: ${{ matrix.test-suite }}" > results/test_suite.txt
        docker compose -f docker-compose.enhanced.yml logs > logs/compose_logs.txt 2>&1 || true
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nat-test-results-${{ matrix.test-suite }}
        path: |
          docker/results/
          docker/logs/
        if-no-files-found: warn
        
    - name: Upload metrics
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nat-test-metrics-${{ matrix.test-suite }}
        path: docker/results/metrics/
        if-no-files-found: warn
        
    - name: Generate test summary
      if: always()
      run: |
        cd docker
        if [ -f results/enhanced_test_report.md ]; then
          echo "## Test Results Summary - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat results/enhanced_test_report.md >> $GITHUB_STEP_SUMMARY
        else
          echo "## Test Results - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "No test report generated" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Clean up Docker resources
      if: always()
      continue-on-error: true
      run: |
        cd docker
        docker compose -f docker-compose.enhanced.yml down -v --remove-orphans || true
        docker system prune -af --volumes || true