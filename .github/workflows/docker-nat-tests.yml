# Docker NAT Tests
# Simplified version for act compatibility

name: Docker NAT Tests

on:
  workflow_call:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-nat-tests:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    continue-on-error: true

    strategy:
      matrix:
        test-suite:
          - basic-connectivity
          - nat-traversal
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Prepare networking tools
      run: |
        sudo apt-get update
        sudo apt-get install -y iptables iproute2 net-tools conntrack
        sudo sysctl -w net.ipv4.ip_forward=1
        sudo update-alternatives --set iptables /usr/sbin/iptables-legacy || true
        sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || true

    - name: Free up disk space
      if: ${{ !env.ACT }}
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Set up Docker Buildx
      if: ${{ !env.ACT }}
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        buildkitd-flags: --debug

    - name: Set up Docker for act
      if: env.ACT
      run: |
        docker --version
        docker info

    - name: Cache Docker layers
      if: ${{ !env.ACT }}
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Configure Docker for NAT testing
      continue-on-error: true
      run: |
        docker network create --ipv6 --subnet=2001:db8:1::/64 nat-test-ipv6 || true
        if [ -z "$ACT" ]; then
          sudo modprobe ip6table_nat || true
          sudo modprobe nf_nat_ipv6 || true
        else
          echo "Skipping kernel module loading in act environment"
        fi

    - name: Set up test environment
      run: |
        cd docker
        chmod +x scripts/*.sh
        mkdir -p logs results
        docker system prune -f || true
        docker network prune -f || true
        echo "DOCKER_CONTAINER_LIMITS=50" >> $GITHUB_ENV

    - name: Build test images
      run: |
        cd docker
        echo "Building ant-quic runtime image..."
        docker build \
          -f Dockerfile.ant-quic \
          --target runtime \
          -t ant-quic:runtime \
          --build-arg CARGO_BUILD_JOBS=2 \
          .. || exit 1

        echo "Building compose services..."
        docker compose -f docker-compose.enhanced.yml build --parallel || \
        docker compose -f docker-compose.enhanced.yml build

    - name: Run NAT test suite - ${{ matrix.test-suite }}
      if: always()
      continue-on-error: true
      timeout-minutes: 30
      run: |
        cd docker
        export TEST_TIMEOUT=1800
        export CONNECTION_TIMEOUT=60
        export COMPOSE_PROJECT_NAME="nat-test-${{ matrix.test-suite }}-${{ github.run_id }}"

        case "${{ matrix.test-suite }}" in
          basic-connectivity)
            echo "Running basic connectivity tests..."
            ./scripts/run-enhanced-nat-tests.sh test_basic_connectivity || echo "Basic connectivity test failed with status: $?"
            ;;
          nat-traversal)
            echo "Running NAT traversal tests..."
            ls -la scripts/run-simple-nat-test.sh
            ./scripts/run-simple-nat-test.sh || echo "NAT traversal test failed with status: $?"
            ;;
        esac

    - name: Evaluate test outcome
      if: always()
      run: |
        cd docker
        if [ ! -f results/status ]; then
          echo "::error::No status file found; treating as failure"
          exit 1
        fi
        echo "NAT test suite status: $(cat results/status)"
        if grep -q FAIL results/status; then
          echo "::error::One or more tests failed in suite ${{ matrix.test-suite }}"
          exit 1
        fi
        echo "All tests in suite ${{ matrix.test-suite }} passed."

    - name: Collect test results
      if: always()
      run: |
        cd docker
        mkdir -p results logs
        echo "Test suite: ${{ matrix.test-suite }}" > results/test_suite.txt
        docker compose -f docker-compose.enhanced.yml logs > logs/compose_logs.txt 2>&1 || true
        if [ -f results/status ]; then
          STATUS=$(cat results/status)
        else
          STATUS=UNKNOWN
        fi
        echo "status=${STATUS}" >> "$GITHUB_OUTPUT"

    - name: Upload test artifacts
      if: ${{ always() && !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: nat-test-results-${{ matrix.test-suite }}
        path: |
          docker/results/
          docker/logs/
        if-no-files-found: warn

    - name: Upload metrics
      if: ${{ always() && !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: nat-test-metrics-${{ matrix.test-suite }}
        path: docker/results/metrics/
        if-no-files-found: warn

    - name: Generate test summary
      if: always()
      run: |
        cd docker
        if [ -f results/enhanced_test_report.md ]; then
          echo "## Test Results Summary - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat results/enhanced_test_report.md >> $GITHUB_STEP_SUMMARY
        else
          echo "## Test Results - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "No test report generated" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail job on test failures
      if: always()
      run: |
        cd docker
        if [ -f results/status ]; then
          STATUS=$(cat results/status)
          if [ "$STATUS" != "PASS" ]; then
            echo "Detected test failures (status=$STATUS). Failing job." >&2
            exit 1
          fi
        else
          echo "No status file found; assuming failure" >&2
          exit 1
        fi

    - name: Clean up Docker resources
      if: always()
      continue-on-error: true
      run: |
        cd docker
        docker compose -f docker-compose.enhanced.yml down -v --remove-orphans || true
        docker compose -f docker-compose.simple.yml down -v --remove-orphans || true
        docker network rm nat-test-ipv6 || true
        docker system prune -f || true
        docker network prune -f || true
        docker volume prune -f || true