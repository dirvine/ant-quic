name: NAT Traversal Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  CARGO_TERM_COLOR: always

jobs:
  nat-traversal-unit-tests:
    name: NAT Traversal Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --all-features --verbose
    
    - name: Run NAT traversal tests
      run: |
        cargo test nat_traversal --features "test-utils" --verbose
        cargo test candidate_discovery --features "test-utils" --verbose
        cargo test connection_establishment --features "test-utils" --verbose
        cargo test frame_encoding --features "test-utils" --verbose
    
    - name: Run integration tests
      run: cargo test --test nat_traversal_comprehensive --features "test-utils" --verbose

  docker-nat-simulation:
    name: Docker NAT Simulation Tests
    runs-on: ubuntu-latest
    needs: nat-traversal-unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release --bin ant-quic
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        cd docker
        docker-compose build
    
    - name: Run Full Cone NAT test
      run: |
        cd docker
        ./scripts/test_nat_type.sh fullcone
      timeout-minutes: 10
    
    - name: Run Symmetric NAT test
      run: |
        cd docker
        ./scripts/test_nat_type.sh symmetric
      timeout-minutes: 10
    
    - name: Run Port Restricted NAT test
      run: |
        cd docker
        ./scripts/test_nat_type.sh port-restricted
      timeout-minutes: 10
    
    - name: Run mixed NAT environment test
      run: |
        cd docker
        docker-compose up --abort-on-container-exit --exit-code-from test-runner
      timeout-minutes: 15
    
    - name: Collect test results
      if: always()
      run: |
        cd docker
        mkdir -p ../test-results
        docker-compose logs > ../test-results/docker-logs.txt
        docker cp $(docker-compose ps -q test-runner):/app/results ../test-results/ || true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nat-simulation-results-${{ github.sha }}
        path: test-results/
        retention-days: 7

  stress-tests:
    name: NAT Traversal Stress Tests
    runs-on: ubuntu-latest
    needs: nat-traversal-unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run stress tests
      run: |
        cargo test --test nat_traversal_comprehensive -- --ignored stress
      timeout-minutes: 30
      env:
        RUST_LOG: ant_quic=debug
    
    - name: Generate stress test report
      if: always()
      run: |
        mkdir -p test-results
        echo "# NAT Traversal Stress Test Results" > test-results/stress-report.md
        echo "## Test Run: $(date)" >> test-results/stress-report.md
        echo "## Git SHA: ${{ github.sha }}" >> test-results/stress-report.md
    
    - name: Upload stress test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-results-${{ github.sha }}
        path: test-results/
        retention-days: 7

  platform-specific-tests:
    name: Platform-Specific NAT Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            features: "linux-tests"
          - os: macos-latest
            features: "macos-tests"
          - os: windows-latest
            features: "windows-tests"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run platform-specific tests
      run: cargo test --features "${{ matrix.features }}" --verbose
    
    - name: Test network interface discovery
      run: |
        cargo run --example interface_discovery --features "network-discovery"
      timeout-minutes: 5

  security-validation:
    name: NAT Traversal Security Validation
    runs-on: ubuntu-latest
    needs: nat-traversal-unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run security validation tests
      run: |
        cargo test --test address_discovery_security --features "test-utils" --verbose
        ./scripts/security-validation.sh
    
    - name: Check for security vulnerabilities
      run: |
        cargo install cargo-audit
        cargo audit

  summary:
    name: NAT Traversal Test Summary
    runs-on: ubuntu-latest
    needs: [docker-nat-simulation, stress-tests, platform-specific-tests, security-validation]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.docker-nat-simulation.result }}" != "success" ] || \
           [ "${{ needs.stress-tests.result }}" != "success" ] || \
           [ "${{ needs.platform-specific-tests.result }}" != "success" ] || \
           [ "${{ needs.security-validation.result }}" != "success" ]; then
          echo "One or more NAT traversal tests failed"
          exit 1
        fi
        echo "All NAT traversal tests passed successfully"
