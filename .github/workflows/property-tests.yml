name: Property Tests

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      test_cases:
        description: 'Number of test cases per property'
        required: false
        default: '256'
        type: string
      extended:
        description: 'Run extended property tests'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ master, main ]
    paths:
      - '**.rs'
      - '**/Cargo.toml'
      - '.github/workflows/property-tests.yml'
      - 'tests/property_tests/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - '**.rs'
      - 'tests/property_tests/**'
  schedule:
    # Run extended tests weekly
    - cron: '0 4 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PROPTEST_CASES: ${{ github.event.inputs.test_cases || '256' }}
  PROPTEST_MAX_SHRINK_ITERS: 10000

jobs:
  quick-property-tests:
    name: Quick Property Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: proptest
      
      - name: Run quick property tests
        run: |
          echo "Running property tests with $PROPTEST_CASES cases"
          cargo test --test property_tests --release -- --test-threads=4
        env:
          PROPTEST_CASES: 100
      
      - name: Check for regressions
        run: |
          # Check if any proptest regressions were found
          if [ -d "proptest-regressions" ]; then
            echo "::error::Property test regressions found!"
            find proptest-regressions -name "*.txt" -exec echo "::error file={}::{}" \;
            find proptest-regressions -name "*.txt" -exec cat {} \;
            exit 1
          fi

  standard-property-tests:
    name: Standard Property Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: proptest-${{ matrix.os }}
      
      - name: Run standard property tests
        run: |
          cargo test --test property_tests --release
        env:
          PROPTEST_CASES: ${{ env.PROPTEST_CASES }}
      
      - name: Upload regression files
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: proptest-regressions-${{ matrix.os }}
          path: proptest-regressions/

  extended-property-tests:
    name: Extended Property Tests
    if: github.event.inputs.extended == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: proptest-extended
      
      - name: Run extended property tests
        run: |
          echo "Running extended property tests with 1024 cases"
          cargo test --test property_tests --release -- --test-threads=8
        env:
          PROPTEST_CASES: 1024
          PROPTEST_MAX_SHRINK_ITERS: 50000
      
      - name: Generate coverage for property tests
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --test property_tests --out Html --output-dir coverage
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: property-test-coverage
          path: coverage/

  fuzz-property-hybrid:
    name: Fuzz-Property Hybrid Tests
    if: github.event_name == 'schedule' || github.event.inputs.extended == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      
      - name: Run hybrid tests
        run: |
          # Run property tests with fuzzer-generated inputs
          echo "Running hybrid property-fuzz tests"
          # This would integrate with fuzzing infrastructure
          cargo test --test property_tests --features fuzzing

  property-test-matrix:
    name: Property Test Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        feature: [
          "rustls-ring",
          "rustls-aws-lc-rs",
          "runtime-tokio",
          "runtime-async-std"
        ]
        test_suite: [
          "frame_properties",
          "nat_properties",
          "transport_properties",
          "connection_properties",
          "crypto_properties"
        ]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Run property tests for ${{ matrix.feature }}
        run: |
          cargo test --test property_tests --no-default-features --features ${{ matrix.feature }} \
            ${{ matrix.test_suite }} --release
        env:
          PROPTEST_CASES: 256

  shrink-minimization:
    name: Shrink Minimization Check
    if: failure()
    needs: [standard-property-tests, extended-property-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download regression artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: proptest-regressions-*
          path: regressions/
      
      - name: Analyze regressions
        run: |
          echo "## Property Test Regression Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for regression in regressions/*/proptest-regressions/**/*.txt; do
            if [ -f "$regression" ]; then
              echo "### Regression in $(basename $regression)" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              head -20 "$regression" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
      
      - name: Minimize failing cases
        run: |
          # Install tools for minimization
          cargo install cargo-proptest
          
          # Run minimization on each regression
          for regression in regressions/*/proptest-regressions/**/*.txt; do
            if [ -f "$regression" ]; then
              echo "Minimizing $regression"
              # This would run proptest minimization
            fi
          done

  property-test-report:
    name: Generate Property Test Report
    if: always()
    needs: [quick-property-tests, standard-property-tests, extended-property-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate report
        run: |
          echo "# Property Test Report" > property-test-report.md
          echo "" >> property-test-report.md
          echo "## Summary" >> property-test-report.md
          echo "- Quick Tests: ${{ needs.quick-property-tests.result }}" >> property-test-report.md
          echo "- Standard Tests: ${{ needs.standard-property-tests.result }}" >> property-test-report.md
          echo "- Extended Tests: ${{ needs.extended-property-tests.result || 'skipped' }}" >> property-test-report.md
          echo "" >> property-test-report.md
          echo "## Configuration" >> property-test-report.md
          echo "- Test Cases: ${{ env.PROPTEST_CASES }}" >> property-test-report.md
          echo "- Max Shrink Iterations: ${{ env.PROPTEST_MAX_SHRINK_ITERS }}" >> property-test-report.md
          echo "" >> property-test-report.md
          echo "## Test Suites" >> property-test-report.md
          echo "- Frame Properties" >> property-test-report.md
          echo "- NAT Properties" >> property-test-report.md  
          echo "- Transport Properties" >> property-test-report.md
          echo "- Connection Properties" >> property-test-report.md
          echo "- Crypto Properties" >> property-test-report.md
          
          cat property-test-report.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: property-test-report
          path: property-test-report.md