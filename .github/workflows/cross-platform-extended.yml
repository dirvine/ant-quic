name: Extended Cross-Platform Tests

on:
  workflow_dispatch:
    inputs:
      test-level:
        description: 'Test level'
        required: false
        default: 'full'
        type: choice
        options:
          - quick
          - standard
          - full
          - exhaustive
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Extended platform matrix including more targets
  extended-matrix:
    name: Extended Platform Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux variants
          - os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            name: "Ubuntu 20.04"
          - os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            name: "Ubuntu 22.04"
          
          
          # macOS variants
          - os: macos-15
            rust: stable
            target: aarch64-apple-darwin
            name: "macOS 15 (Apple Silicon)"
          - os: macos-13
            rust: stable
            target: x86_64-apple-darwin
            name: "macOS 13 (Intel)"
          - os: macos-14
            rust: stable
            target: aarch64-apple-darwin
            name: "macOS 14 (Apple Silicon)"
            
          # Windows variants
          - os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc
            name: "Windows Server 2019"
          - os: windows-2022
            rust: stable
            target: x86_64-pc-windows-msvc
            name: "Windows Server 2022"
          - os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc
            name: "Windows 32-bit"
            
          # Cross-compilation targets
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
            name: "Linux ARM64 (musl)"
            cross: true
          - os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-musleabihf
            name: "Linux ARMv7 (musl)"
            cross: true
          - os: ubuntu-latest
            rust: stable
            target: riscv64gc-unknown-linux-gnu
            name: "Linux RISC-V 64"
            cross: true
          - os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            name: "Linux s390x"
            cross: true
          - os: ubuntu-latest
            rust: stable
            target: powerpc64le-unknown-linux-gnu
            name: "Linux PowerPC 64 LE"
            cross: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-${{ matrix.rust }}
      
      - name: Build
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross build --target ${{ matrix.target }} --all-features
          else
            cargo build --target ${{ matrix.target }} --all-features
          fi
      
      - name: Test
        if: matrix.cross != true
        run: |
          cargo test --target ${{ matrix.target }} --all-features
          
      - name: Platform-specific tests
        if: matrix.cross != true
        run: |
          .github/scripts/platform-test.sh
        env:
          TARGET: ${{ matrix.target }}
      
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.name }}-${{ github.run_id }}
          path: |
            platform-test-report-*.json
            test-results/

  # Tier 3 platform testing (best effort)
  tier3-platforms:
    name: Tier 3 Platform Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        target:
          - aarch64-unknown-none
          - aarch64-unknown-none-softfloat
          - thumbv7m-none-eabi
          - thumbv8m.base-none-eabi
          - x86_64-unknown-redox
          - x86_64-unknown-haiku
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Check compilation
        run: |
          cargo check --target ${{ matrix.target }} --no-default-features || true

  # Mobile platform testing
  mobile-platforms:
    name: Mobile Platform Tests
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim
      
      - name: Install cargo-lipo
        run: cargo install cargo-lipo
      
      - name: Build for iOS
        run: |
          cargo lipo --targets aarch64-apple-ios
          cargo build --target x86_64-apple-ios
          cargo build --target aarch64-apple-ios-sim
      
      - name: Check iOS compatibility
        run: |
          # Verify no forbidden symbols
          nm -u target/aarch64-apple-ios/debug/libant_quic.a | grep -v "U _" || true

  # Embedded platform testing
  embedded-platforms:
    name: Embedded Platform Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv7em-none-eabihf,thumbv8m.main-none-eabihf
      
      - name: Install embedded tools
        run: |
          cargo install cargo-binutils
          rustup component add llvm-tools-preview
      
      - name: Build for embedded
        run: |
          cargo build --target thumbv7em-none-eabihf --no-default-features
          cargo build --target thumbv8m.main-none-eabihf --no-default-features
      
      - name: Check binary size
        run: |
          cargo size --target thumbv7em-none-eabihf --no-default-features -- -A

  # Performance comparison across platforms
  platform-benchmarks:
    name: Platform Performance Comparison
    if: github.event.inputs.test-level == 'exhaustive'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Run benchmarks
        run: |
          cargo bench --all-features -- --output-format bencher | tee output.txt
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: bench-${{ matrix.os }}
          path: output.txt

  # Summary report
  summary:
    name: Generate Platform Report
    needs: [extended-matrix, tier3-platforms, mobile-platforms, embedded-platforms]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Generate report
        run: |
          echo "# Extended Cross-Platform Test Report" > report.md
          echo "" >> report.md
          echo "## Test Summary" >> report.md
          echo "" >> report.md
          
          # Count successful platforms
          success_count=$(find artifacts -name "platform-test-report-*.json" | wc -l)
          echo "âœ… Successfully tested on $success_count platform configurations" >> report.md
          echo "" >> report.md
          
          echo "## Platform Coverage" >> report.md
          echo "" >> report.md
          echo "### Tier 1 (Fully Supported)" >> report.md
          echo "- âœ… Linux x86_64 (glibc)" >> report.md
          echo "- âœ… Windows x86_64 (MSVC)" >> report.md
          echo "- âœ… macOS x86_64" >> report.md
          echo "- âœ… macOS aarch64" >> report.md
          echo "" >> report.md
          
          echo "### Tier 2 (Best Effort)" >> report.md
          echo "- âœ… Linux aarch64" >> report.md
          echo "- âœ… Linux armv7" >> report.md
          echo "- âœ… Windows i686" >> report.md
          echo "- âœ… Linux musl targets" >> report.md
          echo "- âœ… iOS targets" >> report.md
          echo "- âœ… Android targets" >> report.md
          echo "- âœ… WASM32" >> report.md
          echo "" >> report.md
          
          echo "### Tier 3 (Experimental)" >> report.md
          echo "- ðŸ§ª RISC-V 64" >> report.md
          echo "- ðŸ§ª PowerPC 64 LE" >> report.md
          echo "- ðŸ§ª s390x" >> report.md
          echo "- ðŸ§ª Embedded ARM" >> report.md
          echo "- ðŸ§ª Redox OS" >> report.md
          echo "" >> report.md
          
          cat report.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: platform-test-report
          path: report.md
