name: Quick Checks

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_call:
    outputs:
      passed:
        description: "Whether all quick checks passed"
        value: ${{ jobs.summary.outputs.passed }}

env:
  RUST_BACKTRACE: 1
  # Use stable-supported lint groups; 2024 idioms not universally available yet
  RUSTFLAGS: "-W rust-2021-compatibility -W nonstandard-style"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::correctness -W clippy::suspicious -A clippy::missing_docs_in_private_items

  quick-test:
    name: Quick Tests (<30s)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Run quick tests
        run: |
          # Run categorized quick tests
          cargo test --test quick --features "test-utils" || exit $?

  check:
    name: Cargo Check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Check compilation
        run: cargo check --all-targets

  dependencies:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Check for unused dependencies
        run: |
          cargo install cargo-machete --locked || true
          cargo machete || true  # Non-blocking for now

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated --locked || true
          cargo outdated --exit-code 1 || true  # Non-blocking for now
        

  license-check:
    name: License Header Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}
        with:
          fetch-depth: 1

      - name: Check license headers
        run: |
          # Check that all Rust source files have proper license headers
          # ant-quic uses dual MIT/Apache-2.0 licensing

          missing_headers=0
          for file in $(find src tests examples -name "*.rs" -type f); do
            if ! head -10 "$file" | grep -q -E "(MIT|Apache|License)"; then
              echo "::warning file=$file::Missing license header"
              missing_headers=$((missing_headers + 1))
            fi
          done

          if [ $missing_headers -gt 0 ]; then
            echo "::warning::Found $missing_headers files without license headers"
            # Non-blocking for now, will be enforced later
          fi

  yaml-lint:
    name: YAML/TOML Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate GitHub Actions YAML
        uses: reviewdog/action-actionlint@v1

      - name: Validate TOML files
        run: |
          # Check Cargo.toml files are valid
          find . -name "Cargo.toml" -exec cargo verify-project --manifest-path {} \;

  summary:
    name: Quick Checks Summary
    needs: [lint, quick-test, check, dependencies, license-check, yaml-lint]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      passed: ${{ steps.check.outputs.passed }}
    steps:
      - name: Summary
        id: check
        run: |
          # Check if all required jobs passed
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.quick-test.result }}" == "success" && \
                "${{ needs.check.result }}" == "success" && \
                "${{ needs.yaml-lint.result }}" == "success" ]]; then
            echo "✅ All quick checks passed!"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Some quick checks failed!"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Report Status
        if: always()
        run: |
          echo "### Quick Checks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Clippy | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Tests | ${{ needs.quick-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compilation | ${{ needs.check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependencies.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Headers | ${{ needs.license-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| YAML/TOML | ${{ needs.yaml-lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Time: $(date -u)" >> $GITHUB_STEP_SUMMARY
