name: Cross-Platform Tests

on:
  workflow_call:
    inputs:
      rust-version:
        description: 'Rust version to test'
        required: false
        default: 'stable'
        type: string
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to test (comma-separated)'
        required: false
        default: 'all'
        type: string
  push:
    branches: [master, main]
    paths:
      - '**.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/cross-platform.yml'
  pull_request:
    branches: [master, main]
  schedule:
    # Run weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Define the test matrix
  define-matrix:
    name: Define Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Define platform matrix
        id: set-matrix
        run: |
          # For pushes/PRs default to a minimal matrix; full matrix on schedule or manual dispatch
          EVENT="${{ github.event_name }}"
          PLAT_INPUT="${{ github.event.inputs.platforms }}"
          if [ "$EVENT" = "push" ] || [ "$EVENT" = "pull_request" ]; then
            echo 'matrix={"include":[{"os":"ubuntu-latest","rust":"stable","target":"x86_64-unknown-linux-gnu"},{"os":"macos-latest","rust":"stable","target":"x86_64-apple-darwin"}]}' >> $GITHUB_OUTPUT
          elif [ "$PLAT_INPUT" = "minimal" ]; then
            echo 'matrix={"include":[{"os":"ubuntu-latest","rust":"stable","target":"x86_64-unknown-linux-gnu"},{"os":"windows-latest","rust":"stable","target":"x86_64-pc-windows-msvc"},{"os":"macos-latest","rust":"stable","target":"x86_64-apple-darwin"}]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"include":[{"os":"ubuntu-latest","rust":"stable","target":"x86_64-unknown-linux-gnu"},{"os":"ubuntu-latest","rust":"beta","target":"x86_64-unknown-linux-gnu"},{"os":"ubuntu-latest","rust":"1.85.0","target":"x86_64-unknown-linux-gnu"},{"os":"macos-latest","rust":"stable","target":"x86_64-apple-darwin"},{"os":"macos-latest","rust":"stable","target":"aarch64-apple-darwin","cross":true},{"os":"ubuntu-latest","rust":"stable","target":"aarch64-unknown-linux-gnu","cross":true}]}' >> $GITHUB_OUTPUT
          fi

  # Main cross-platform test job
  cross-platform-test:
    name: Test ${{ matrix.target }} / Rust ${{ matrix.rust }}
    needs: define-matrix
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.define-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}

      # Cache setup
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-cargo-build-${{ matrix.rust }}-
            ${{ matrix.os }}-${{ matrix.target }}-cargo-build-

      # Rust toolchain setup
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      # Cross compilation setup
      - name: Install cross-compilation tools
        if: matrix.cross == true
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      # WASM setup
      - name: Install wasm-pack
        if: matrix.wasm == true
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-pack

      # Platform-specific setup
      - name: Windows-specific setup
        if: runner.os == 'Windows'
        run: |
          echo "CARGO_BUILD_JOBS=2" >> $env:GITHUB_ENV
          echo "Running on Windows with ${{ matrix.target }}"

      - name: macOS-specific setup
        if: runner.os == 'macOS'
        run: |
          echo "CARGO_BUILD_JOBS=3" >> $GITHUB_ENV
          echo "Running on macOS with ${{ matrix.target }}"
          # Handle both x86_64 and ARM64 on macOS
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            echo "Cross-compiling for Apple Silicon"
          fi

      - name: Linux-specific setup
        if: runner.os == 'Linux'
        run: |
          echo "CARGO_BUILD_JOBS=2" >> $GITHUB_ENV
          # Install additional dependencies for cross-compilation
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            case "${{ matrix.target }}" in
              aarch64-unknown-linux-gnu)
                sudo apt-get update
                sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                ;;
              armv7-unknown-linux-gnueabihf)
                sudo apt-get update
                sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
                ;;
            esac
          fi

      # Build
      - name: Build (native)
        if: matrix.cross != true && matrix.wasm != true
        run: cargo build --target ${{ matrix.target }} --all-features --verbose

      - name: Build (cross)
        if: matrix.cross == true
        run: cross build --target ${{ matrix.target }} --all-features --verbose

      - name: Build (wasm)
        if: matrix.wasm == true
        run: |
          cargo build --target ${{ matrix.target }} --no-default-features
          # Test WASM build of ant-quic
          wasm-pack build --target web

      # Tests
      - name: Run tests (native)
        if: matrix.cross != true && matrix.wasm != true
        run: |
          cargo test --target ${{ matrix.target }} --all-features --verbose
          cargo test --target ${{ matrix.target }} --no-default-features --verbose

      - name: Run tests (cross)
        if: matrix.cross == true && matrix.target != 'aarch64-apple-darwin'
        run: cross test --target ${{ matrix.target }} --all-features --verbose

      # Platform-specific tests
      - name: Run platform-specific tests
        if: matrix.cross != true && matrix.wasm != true
        run: |
          # Run platform-specific test suites
          cargo test --target ${{ matrix.target }} --test platform_specific --features platform-tests

      # Feature combination tests
      - name: Test feature combinations
        if: matrix.cross != true && matrix.wasm != true && matrix.rust == 'stable'
        run: |
          # Test with different crypto providers
          cargo test --target ${{ matrix.target }} --no-default-features --features rustls-ring
          cargo test --target ${{ matrix.target }} --no-default-features --features rustls-aws-lc-rs

          # Test runtime combinations
          cargo test --target ${{ matrix.target }} --no-default-features --features runtime-tokio,rustls-ring
          cargo test --target ${{ matrix.target }} --no-default-features --features runtime-async-std,rustls-ring

      # Benchmarks (only on stable)
      - name: Check benchmarks compile
        if: matrix.rust == 'stable' && matrix.cross != true && matrix.wasm != true
        run: cargo bench --target ${{ matrix.target }} --no-run

      # Examples
      - name: Build examples
        if: matrix.cross != true && matrix.wasm != true
        run: cargo build --target ${{ matrix.target }} --examples

      # Generate test report
      - name: Generate platform test report
        if: always()
        run: |
          mkdir -p test-results
          echo "Platform: ${{ matrix.os }}" > test-results/platform-report-${{ matrix.target }}-${{ matrix.rust }}.txt
          echo "Target: ${{ matrix.target }}" >> test-results/platform-report-${{ matrix.target }}-${{ matrix.rust }}.txt
          echo "Rust: ${{ matrix.rust }}" >> test-results/platform-report-${{ matrix.target }}-${{ matrix.rust }}.txt
          echo "Status: ${{ job.status }}" >> test-results/platform-report-${{ matrix.target }}-${{ matrix.rust }}.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.target }}-${{ matrix.rust }}
          path: test-results/

  # Aggregate results
  platform-test-summary:
    name: Platform Test Summary
    needs: cross-platform-test
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        if: ${{ !startsWith(runner.name, 'nektos/act') }}

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: all-results/

      - name: Generate summary report
        run: |
          echo "# Cross-Platform Test Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Target | Rust Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|--------------|--------|" >> $GITHUB_STEP_SUMMARY

          # Process all test results
          for report in all-results/*/platform-report-*.txt; do
            if [ -f "$report" ]; then
              platform=$(grep "Platform:" "$report" | cut -d' ' -f2-)
              target=$(grep "Target:" "$report" | cut -d' ' -f2-)
              rust=$(grep "Rust:" "$report" | cut -d' ' -f2-)
              status=$(grep "Status:" "$report" | cut -d' ' -f2-)

              # Add emoji for status
              if [ "$status" = "success" ]; then
                status="✅ Success"
              else
                status="❌ Failed"
              fi

              echo "| $platform | $target | $rust | $status |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Platform Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linux (x86_64, ARM64, ARMv7)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS (x86_64, ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ WASM32" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Rust Version Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Stable" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Beta" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ MSRV (1.85.0)" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          # Fail if any platform tests failed
          failed=0
          for report in all-results/*/platform-report-*.txt; do
            if [ -f "$report" ]; then
              if ! grep -q "Status: success" "$report"; then
                echo "Failed test found: $report"
                cat "$report"
                failed=1
              fi
            fi
          done
          exit $failed

  # MSRV verification job
  msrv-check:
    name: Verify MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.85.0

      - name: Check MSRV
        run: |
          cargo check --all-features
          cargo check --no-default-features
