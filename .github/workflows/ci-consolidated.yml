name: CI Consolidated

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

# Prevent multiple runs for same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Quick sanity checks first
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (policy â€” lib/bins/examples)
        run: |
          cargo clippy --all-features --lib --bins --examples -- \
            -D warnings

      - name: Quick build check
        run: cargo check --all-targets

  # Main test suite
  test:
    name: Test Suite
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --all-targets

      - name: Test
        run: cargo test --all-features

      - name: Doc tests
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        run: cargo test --doc

  # Security and quality checks
  security:
    name: Security & Quality
    needs: quick-checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security audit
        run: cargo audit

      - name: Check dependencies
        run: cargo tree --duplicates

  # NAT tests integration
  nat-tests:
    name: NAT Tests
    needs: quick-checks
    uses: ./.github/workflows/docker-nat-tests.yml

  # Coverage (only on main builds)
  coverage:
    name: Code Coverage
    needs: test
    continue-on-error: true
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 120 \
            --skip test_nat_traversal_direct_connection \
            --skip test_network_partition_recovery \
            --skip test_rapid_reconnection \
            --skip test_linux_interface_discovery \
            --out xml \
            -- --test-threads=1

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # MSRV verification (non-blocking)
  verify-msrv:
    name: Verify MSRV
    needs: quick-checks
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust MSRV
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.85.0
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Check MSRV compatibility
        run: cargo check --all-features

  # Summary job for branch protection
  ci-success:
    name: CI Success
    needs: [quick-checks, test, security, nat-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.quick-checks.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.nat-tests.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs passed!"
